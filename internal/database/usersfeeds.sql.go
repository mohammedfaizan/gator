// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: usersfeeds.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follows AS ( 
INSERT INTO feed_follows (id, user_id, feed_id)
VALUES (
    $1,
    $2,
    $3
    )
RETURNING id, created_at, updated_at, user_id, feed_id
)

SELECT inserted_feed_follows.id, inserted_feed_follows.created_at, inserted_feed_follows.updated_at, inserted_feed_follows.user_id, inserted_feed_follows.feed_id,
    feeds.name AS feed_name,
    users.name AS user_name

FROM inserted_feed_follows
INNER JOIN feeds
ON inserted_feed_follows.feed_id = feeds.id 
INNER JOIN users
ON inserted_feed_follows.user_id = users.id
`

type CreateFeedFollowParams struct {
	ID     string
	UserID sql.NullString
	FeedID sql.NullString
}

type CreateFeedFollowRow struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    sql.NullString
	FeedID    sql.NullString
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.ID, arg.UserID, arg.FeedID)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const deleteFeedFollows = `-- name: DeleteFeedFollows :exec
DELETE FROM feed_follows
WHERE user_id = $1 and feed_id = $2
`

type DeleteFeedFollowsParams struct {
	UserID sql.NullString
	FeedID sql.NullString
}

func (q *Queries) DeleteFeedFollows(ctx context.Context, arg DeleteFeedFollowsParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollows, arg.UserID, arg.FeedID)
	return err
}

const getFeedByIDs = `-- name: GetFeedByIDs :one
SELECT id, created_at, updated_at, user_id, feed_id FROM feed_follows
WHERE user_id = $1 and feed_id = $2
`

type GetFeedByIDsParams struct {
	UserID sql.NullString
	FeedID sql.NullString
}

func (q *Queries) GetFeedByIDs(ctx context.Context, arg GetFeedByIDsParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, getFeedByIDs, arg.UserID, arg.FeedID)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT feed_follows.id, feed_follows.created_at, feed_follows.updated_at, feed_follows.user_id, feed_follows.feed_id,
    feeds.name AS feed_name,
    users.name AS user_name
FROM feed_follows
INNER JOIN feeds ON feed_follows.feed_id = feeds.id
INNER JOIN users ON feed_follows.user_id = users.id
WHERE feed_follows.user_id = $1
`

type GetFeedFollowsForUserRow struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    sql.NullString
	FeedID    sql.NullString
	FeedName  string
	UserName  string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID sql.NullString) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
			&i.FeedName,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
